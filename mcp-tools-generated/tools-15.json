[
	{
		"tool_name": "Pages_Rename",
		"description": "Renames a specified Page or Component.",
		"input_schema": {
			"type": "object",
			"properties": {
				"Id": {
					"type": "string",
					"minLength": 1
				},
				"Name": {
					"type": "string",
					"minLength": 1
				}
			},
			"required": [
				"Id",
				"Name"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/pages/rename",
		"tags": [
			"Pages"
		],
		"summary": "Renames a specified Page or Component."
	},
	{
		"tool_name": "Pages_CheckIn",
		"description": "Check in the Page specified in the request.",
		"input_schema": {
			"type": "object",
			"properties": {
				"Id": {
					"type": "string",
					"minLength": 1
				},
				"Recursive": {
					"type": "boolean"
				},
				"PublishingTargetIds": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"Comment": {
					"type": "string"
				}
			},
			"required": [
				"Recursive",
				"Id"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/pages/checkin",
		"tags": [
			"Pages"
		],
		"summary": "Check in the Page specified in the request.",
		"endpoint_description": "If the Page was already checked in, the operation will continue to check in descendants and mark the Page's latest version on the publishing targets.\nThe current user must have permission to check in and check out Pages. Otherwise, an error will be thrown.\nIf the Page is not assigned to the current user and the current user doesn't have to right to check in other user's Pages, an error will be thrown."
	},
	{
		"tool_name": "Pages_CheckOut",
		"description": "Check out the Page specified in the request.",
		"input_schema": {
			"type": "object",
			"properties": {
				"Id": {
					"type": "string",
					"minLength": 1
				},
				"Recursive": {
					"type": "boolean"
				}
			},
			"required": [
				"Recursive",
				"Id"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/pages/checkout",
		"tags": [
			"Pages"
		],
		"summary": "Check out the Page specified in the request.",
		"endpoint_description": "If the Page was already checked out, the operation will continue to check out descendants.\nThe current user must have permission to check in and check out Pages. Otherwise, an error will be thrown."
	},
	{
		"tool_name": "Pages_CreatePCRPage",
		"description": "Creates a new Page based on a Page Creation Rule.",
		"input_schema": {
			"type": "object",
			"properties": {
				"PCRId": {
					"type": "string",
					"minLength": 1
				},
				"Name": {
					"type": "string",
					"minLength": 1
				},
				"ParentPageId": {
					"type": "string"
				},
				"SkipWorkflow": {
					"type": "boolean"
				},
				"AssignToUserId": {
					"type": "string"
				}
			},
			"required": [
				"PCRId",
				"Name",
				"SkipWorkflow"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/pages/page/pcr",
		"tags": [
			"Pages"
		],
		"summary": "Creates a new Page based on a Page Creation Rule.",
		"endpoint_description": "If .Name is null or empty, it will default to one empty space.\n\n\nIf a .ParentPageId is empty the newly created page will be placed under the Page Creation Rule's first accessible page.\n\n\nIf a .AssignToUserId is empty, the new Page will be assigned to\neither the Default Transition 's Default User or\nto the Transitions' Next Group.\n\nThe event \"PageCreated\" will be fired upon page creation."
	},
	{
		"tool_name": "Pages_GetPageHistory",
		"description": "Retrieves a Page's history as a collection of ContentItemVersionInfo for all of the versions a Page been through.",
		"input_schema": {
			"type": "object",
			"properties": {
				"Id": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"PageSize": {
					"type": "integer",
					"required": false,
					"in": "query"
				},
				"StartIndex": {
					"type": "integer",
					"required": false,
					"in": "query"
				}
			}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/pages/history",
		"tags": [
			"Pages"
		],
		"summary": "Retrieves a Page's history as a collection of ContentItemVersionInfo for all of the versions a Page been through."
	},
	{
		"tool_name": "Pages_GetWorkflowStates",
		"description": "Retrieves a list of all the Workflow States for a specified Page.",
		"input_schema": {
			"type": "object",
			"properties": {
				"pageId": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "ID of the Page to get Workflow States for"
				}
			},
			"required": [
				"pageId"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/pages/page/workflow/workstates",
		"tags": [
			"Pages"
		],
		"summary": "Retrieves a list of all the Workflow States for a specified Page.",
		"endpoint_description": "If there is no current workflow set for the specified page, will return null."
	},
	{
		"tool_name": "Pages_GetContentUnits",
		"description": "Gets a collection of Content Units allowed to be used on a Page.",
		"input_schema": {
			"type": "object",
			"properties": {
				"pageId": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "ID of the Page to get Content Units for."
				},
				"pubTgtId": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "Id of the current Publishing Target."
				}
			},
			"required": [
				"pageId",
				"pubTgtId"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/pages/page/design/content-units",
		"tags": [
			"Pages"
		],
		"summary": "Gets a collection of Content Units allowed to be used on a Page.",
		"endpoint_description": "Used to retrieve the collection of Content Units displayed in the CMS Design tab's sidebar container."
	},
	{
		"tool_name": "Pages_AdvanceWorkflow",
		"description": "Moves a Page's Workflow to the next state.",
		"input_schema": {
			"type": "object",
			"properties": {
				"ContentId": {
					"type": "string",
					"minLength": 1
				},
				"TransitionId": {
					"type": "string"
				},
				"Comments": {
					"type": "string"
				},
				"AssignToUserId": {
					"type": "string"
				}
			},
			"required": [
				"ContentId"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/pages/page/workflow/advance",
		"tags": [
			"Pages"
		],
		"summary": "Moves a Page's Workflow to the next state.",
		"endpoint_description": "If the request.TransitionId is null or empty the Workflow's default Transition will be used.\nIf the request.AssignToUserId is null or empty the Transition default user will be set as the next assigned user."
	},
	{
		"tool_name": "Pages_CreateDITAAlias",
		"description": "Pages put operation",
		"input_schema": {
			"type": "object",
			"properties": {
				"assetId": {
					"type": "string",
					"required": true,
					"in": "query"
				},
				"parentPageId": {
					"type": "string",
					"required": true,
					"in": "query"
				},
				"accuracyMode": {
					"type": "boolean",
					"required": false,
					"in": "query"
				},
				"ditaContentOnly": {
					"type": "boolean",
					"required": false,
					"in": "query"
				}
			},
			"required": [
				"assetId",
				"parentPageId"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "put",
		"endpoint": "/pages/dita-alias",
		"tags": [
			"Pages"
		]
	},
	{
		"tool_name": "Pages_UpdateDITAAlias",
		"description": "Pages patch operation",
		"input_schema": {
			"type": "object",
			"properties": {
				"aliasId": {
					"type": "string",
					"required": true,
					"in": "query"
				},
				"updateChildren": {
					"type": "boolean",
					"required": false,
					"in": "query"
				}
			},
			"required": [
				"aliasId"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "patch",
		"endpoint": "/pages/dita-alias",
		"tags": [
			"Pages"
		]
	},
	{
		"tool_name": "Settings_GetSetting",
		"description": "Gets a specified Setting.",
		"input_schema": {
			"type": "object",
			"properties": {},
			"required": [
				"data"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/settings/setting",
		"tags": [
			"Settings"
		],
		"summary": "Gets a specified Setting."
	},
	{
		"tool_name": "Settings_PutSetting",
		"description": "Sets the value of a specified Setting.",
		"input_schema": {
			"type": "object",
			"properties": {
				"Section": {
					"type": "string"
				},
				"Setting": {
					"type": "string"
				},
				"Value": {
					"type": "string"
				}
			}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "put",
		"endpoint": "/settings/setting",
		"tags": [
			"Settings"
		],
		"summary": "Sets the value of a specified Setting.",
		"endpoint_description": "The user must have administrative permissions to change settings."
	},
	{
		"tool_name": "Settings_GetSection",
		"description": "Gets a collection of Settings in a specified settings section.",
		"input_schema": {
			"type": "object",
			"properties": {
				"sectionName": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "Name of the section whose Settings to retrieve."
				}
			},
			"required": [
				"sectionName"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/settings/section",
		"tags": [
			"Settings"
		],
		"summary": "Gets a collection of Settings in a specified settings section."
	},
	{
		"tool_name": "Settings_PutSection",
		"description": "Sets multiple Settings in a specified settings section.",
		"input_schema": {
			"type": "object",
			"properties": {
				"sectionName": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "Name of the section whose Settings to set."
				}
			},
			"required": [
				"sectionName"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "put",
		"endpoint": "/settings/section",
		"tags": [
			"Settings"
		],
		"summary": "Sets multiple Settings in a specified settings section.",
		"endpoint_description": "User must have administrative rights to change settings."
	},
	{
		"tool_name": "Settings_GetData",
		"description": "Get Settings information given a settings context and ID (Ex: context: \"{\"customTab\":\"CustomTabSettings/Analytics\"}\", id: \"customtabsdisplay\")",
		"input_schema": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"context": {
					"type": "string"
				}
			}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/settings/data",
		"tags": [
			"Settings"
		],
		"summary": "Get Settings information given a settings context and ID (Ex: context: \"{\"customTab\":\"CustomTabSettings/Analytics\"}\", id: \"customtabsdisplay\")",
		"endpoint_description": "User must have administrative permissions to access settings."
	},
	{
		"tool_name": "Settings_SetData",
		"description": "Set Settings information given a settings context, data to set, and setting section ID\n(Ex: context: \"{\"customTab\":\"CustomTabSettings/Analytics\"}\", data: \"{\"autoSelect\":true,\"alllowPinning\":false,\"disable\":false}\", id: \"customtabsdisplay\")",
		"input_schema": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"data": {
					"type": "string"
				},
				"context": {
					"type": "string"
				}
			}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "put",
		"endpoint": "/settings/data",
		"tags": [
			"Settings"
		],
		"summary": "Set Settings information given a settings context, data to set, and setting section ID\n(Ex: context: \"{\"customTab\":\"CustomTabSettings/Analytics\"}\", data: \"{\"autoSelect\":true,\"alllowPinning\":false,\"disable\":false}\", id: \"customtabsdisplay\")",
		"endpoint_description": "User must have administrative permissions to access settings."
	},
	{
		"tool_name": "Settings_GetCustomTabs",
		"description": "Gets all of the Custom Tabs for the Operating User.",
		"input_schema": {
			"type": "object",
			"properties": {}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/settings/custom-tabs",
		"tags": [
			"Settings"
		],
		"summary": "Gets all of the Custom Tabs for the Operating User.",
		"endpoint_description": "Resulting list is returned in order of most recently created."
	},
	{
		"tool_name": "Settings_SetCustomTabs",
		"description": "Sets multiple Custom Tabs for the Operating User.",
		"input_schema": {
			"type": "object",
			"properties": {}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "put",
		"endpoint": "/settings/custom-tabs",
		"tags": [
			"Settings"
		],
		"summary": "Sets multiple Custom Tabs for the Operating User.",
		"endpoint_description": "User must have administrative permissions to set Custom Tabs.\nIf  contains duplicate custom tab names, an error will be thrown."
	},
	{
		"tool_name": "Settings_GetTaskUsers",
		"description": "Gets the collection of Users in order of task Users first.",
		"input_schema": {
			"type": "object",
			"properties": {
				"q": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "A filter string used to find Users with names or IDs containing it."
				}
			},
			"required": [
				"q"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/settings/task-users",
		"tags": [
			"Settings"
		],
		"summary": "Gets the collection of Users in order of task Users first.",
		"endpoint_description": "\"Task Users\" are meant for OAuth Identity use only and cannot login to the CMS.\nUnless  is provided filtering other Users out, all Users will be returned, including non-task Users since all Users can be set as \"Executing Users\" for OAuth Identities."
	},
	{
		"tool_name": "Settings_ResetClientSecret",
		"description": "Resets the client secret token for an OAuth Identity with the specified clientId token.",
		"input_schema": {
			"type": "object",
			"properties": {
				"clientId": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "Token string for the OAuth Identity"
				}
			},
			"required": [
				"clientId"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/settings/reset-client-secret",
		"tags": [
			"Settings"
		],
		"summary": "Resets the client secret token for an OAuth Identity with the specified clientId token.",
		"endpoint_description": "Resetting the client secret updates the stored client secret for all applications using the OAuth Identity."
	}
]