[
	{
		"tool_name": "Schemas_SearchAssetSchemas",
		"description": "Perform a search for any asset schemas that fit a SearchSchemaRequest.",
		"input_schema": {
			"type": "object",
			"properties": {
				"SearchText": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"AllowFullListing": {
					"type": "boolean",
					"required": false,
					"in": "query"
				},
				"PageSize": {
					"type": "integer",
					"required": false,
					"in": "query"
				},
				"StartIndex": {
					"type": "integer",
					"required": false,
					"in": "query"
				}
			}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/api/v1/schemas/search-asset-schemas",
		"tags": [
			"Schemas"
		],
		"summary": "Perform a search for any asset schemas that fit a SearchSchemaRequest."
	},
	{
		"tool_name": "Schemas_GetSchemaUsage",
		"description": "Gets a paginated list of SchemaUsageResults\ncontianing information on all content units that use the specified schema.",
		"input_schema": {
			"type": "object",
			"properties": {
				"SchemaId": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"Type": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"Outdated": {
					"type": "boolean",
					"required": false,
					"in": "query"
				},
				"SortField": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"SortOrder": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"PageSize": {
					"type": "integer",
					"required": false,
					"in": "query"
				},
				"StartIndex": {
					"type": "integer",
					"required": false,
					"in": "query"
				}
			}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/api/v1/schemas/schema-usage",
		"tags": [
			"Schemas"
		],
		"summary": "Gets a paginated list of SchemaUsageResults\ncontianing information on all content units that use the specified schema."
	},
	{
		"tool_name": "Schemas_GetSchemaUsageForSyncLogPaginated",
		"description": "Gets the pages synced for a particular SchemaSyncLog id",
		"input_schema": {
			"type": "object",
			"properties": {
				"SyncLogId": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"SchemaId": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"Type": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"Outdated": {
					"type": "boolean",
					"required": false,
					"in": "query"
				},
				"SortField": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"SortOrder": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"PageSize": {
					"type": "integer",
					"required": false,
					"in": "query"
				},
				"StartIndex": {
					"type": "integer",
					"required": false,
					"in": "query"
				}
			}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/api/v1/schemas/schema-sync-log",
		"tags": [
			"Schemas"
		],
		"summary": "Gets the pages synced for a particular SchemaSyncLog id"
	},
	{
		"tool_name": "Assets_AdvanceWorkflow",
		"description": "Advances the Workflow state for the asset specified in the AdvanceWorkflowRequest.",
		"input_schema": {
			"type": "object",
			"properties": {}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/api/v1/assets/asset/workflow/advance",
		"tags": [
			"Assets"
		],
		"summary": "Advances the Workflow state for the asset specified in the AdvanceWorkflowRequest."
	},
	{
		"tool_name": "Assets_AssignToGroup",
		"description": "Assign the asset specified in the AssignAssetUserGroupRequest\nto the group specified in the request.",
		"input_schema": {
			"type": "object",
			"properties": {}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/api/v1/assets/assign-to-group",
		"tags": [
			"Assets"
		],
		"summary": "Assign the asset specified in the AssignAssetUserGroupRequest\nto the group specified in the request."
	},
	{
		"tool_name": "Assets_AssignToUser",
		"description": "Assign the asset specified in the AssignAssetUserRequest\nto the user specified in the request.",
		"input_schema": {
			"type": "object",
			"properties": {}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/api/v1/assets/assign-to-user",
		"tags": [
			"Assets"
		],
		"summary": "Assign the asset specified in the AssignAssetUserRequest\nto the user specified in the request."
	},
	{
		"tool_name": "Assets_CheckIn",
		"description": "Check in the asset specified in the ContentItemCheckInRequest.",
		"input_schema": {
			"type": "object",
			"properties": {}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/api/v1/assets/checkin",
		"tags": [
			"Assets"
		],
		"summary": "Check in the asset specified in the ContentItemCheckInRequest.",
		"endpoint_description": "If the asset was already checked in, the operation will continue to check in descendants and mark the asset's latest version on the publishing targets.\nThe current user must have the permission to check in and check out assets. Otherwise, an error will be thrown.\nIf the asset is not assigned to the current user and the current user doesn't have to right to check in other user's assets, an error will be thrown."
	},
	{
		"tool_name": "Assets_CheckOut",
		"description": "Check out the asset specified in the ContentItemCheckOutRequest.",
		"input_schema": {
			"type": "object",
			"properties": {}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/api/v1/assets/checkout",
		"tags": [
			"Assets"
		],
		"summary": "Check out the asset specified in the ContentItemCheckOutRequest.",
		"endpoint_description": "If the asset was already checked out, the operation will continue to check out descendants.\nThe current user must have the permission to check in and check out assets. Otherwise, an error will be thrown.\nIf the asset is not assigned to the current user and the current user doesn't have to right to check out other user's assets, an error will be thrown."
	},
	{
		"tool_name": "Assets_Copy",
		"description": "Copy the specified Asset into the specified Asset Folder.",
		"input_schema": {
			"type": "object",
			"properties": {
				"tgtId": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "The ID of the Asset Folder to copy the asset into."
				},
				"overwriteSameName": {
					"type": "boolean",
					"required": false,
					"in": "query",
					"description": "Whether to overwrite an asset with the same name upon creation."
				},
				"tgtLocale": {
					"type": "string",
					"required": false,
					"in": "query",
					"description": "Optional: the locale of the target folder. If not provided the locale will be retrieved from the folder."
				}
			},
			"required": [
				"tgtId"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/api/v1/assets/copy",
		"tags": [
			"Assets"
		],
		"summary": "Copy the specified Asset into the specified Asset Folder."
	},
	{
		"tool_name": "Assets_CreateAssetFolder",
		"description": "Create an Asset Folder using information specified in the CreateAssetFolderRequest.",
		"input_schema": {
			"type": "object",
			"properties": {}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/api/v1/assets/asset-folder",
		"tags": [
			"Assets"
		],
		"summary": "Create an Asset Folder using information specified in the CreateAssetFolderRequest."
	},
	{
		"tool_name": "Assets_CheckAssetAliases",
		"description": "Assets get operation",
		"input_schema": {
			"type": "object",
			"properties": {
				"ids": {
					"type": "array",
					"required": false,
					"in": "query"
				}
			}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/api/v1/assets/asset-aliases",
		"tags": [
			"Assets"
		]
	},
	{
		"tool_name": "Assets_DeleteAssetItems",
		"description": "Delete the specified Assets and Asset Folders.",
		"input_schema": {
			"type": "object",
			"properties": {
				"ids": {
					"type": "array",
					"required": false,
					"in": "query",
					"description": "An array of IDs for the Assets and Asset Folders to delete."
				},
				"force": {
					"type": "boolean",
					"required": false,
					"in": "query",
					"description": "Boolean value indicating whether to force removal of the asset items.\n            If true, the specified assets and asset folders will be deleted even if references to them exist in the CMS. Default is false."
				}
			}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "delete",
		"endpoint": "/api/v1/assets",
		"tags": [
			"Assets"
		],
		"summary": "Delete the specified Assets and Asset Folders."
	},
	{
		"tool_name": "Assets_GetAncestors",
		"description": "Get the Asset Folder ancestors for the specified asset item.",
		"input_schema": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "The ID of the asset or\n            asset folder to retrieve ancestors for."
				}
			},
			"required": [
				"id"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/api/v1/assets/asset/ancestors",
		"tags": [
			"Assets"
		],
		"summary": "Get the Asset Folder ancestors for the specified asset item.",
		"endpoint_description": "This method is triggered by a GET call to an endpoint similar to: api/assets/a/10/parent."
	},
	{
		"tool_name": "Assets_GetAsset",
		"description": "Get the Asset specified by the provided ID.",
		"input_schema": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "The ID of the Asset to retrieve."
				}
			},
			"required": [
				"id"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/api/v1/assets/asset",
		"tags": [
			"Assets"
		],
		"summary": "Get the Asset specified by the provided ID.",
		"endpoint_description": "This method is triggered by a GET call to an endpoint similar to: api/assets/asset?id=a/5."
	},
	{
		"tool_name": "Assets_GetAssetByPath",
		"description": "Gets an Asset by its full path.",
		"input_schema": {
			"type": "object",
			"properties": {
				"path": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "The full path of the Asset to retrieve."
				}
			},
			"required": [
				"path"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/api/v1/assets/asset-by-path",
		"tags": [
			"Assets"
		],
		"summary": "Gets an Asset by its full path."
	},
	{
		"tool_name": "Assets_GetAssetContext",
		"description": "Gets a collection of information on the specified Assets or \nAsset Folders such as their schema's allowed extensions,\nwhether they are referenced anywhere, whether they are editable, etc.",
		"input_schema": {
			"type": "object",
			"properties": {}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/api/v1/assets/asset/context",
		"tags": [
			"Assets"
		],
		"summary": "Gets a collection of information on the specified Assets or \nAsset Folders such as their schema's allowed extensions,\nwhether they are referenced anywhere, whether they are editable, etc.",
		"endpoint_description": "This method is triggered by a GET call to an endpoint similar to: api/assets/properties?id=a/10."
	},
	{
		"tool_name": "Assets_GetAssetDetails",
		"description": "Gets the AssetDetailsModel containing\ninformation on the specified Asset or Asset Folder\nincluding its extension, whether it is external, and its external url.",
		"input_schema": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "The ID of the asset item to get information for."
				},
				"version": {
					"type": "integer",
					"required": false,
					"in": "query",
					"description": "Optional version number for the specified asset. If unspecified, details for version 0 of the asset item will be retrieved."
				}
			},
			"required": [
				"id"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/api/v1/assets/details",
		"tags": [
			"Assets"
		],
		"summary": "Gets the AssetDetailsModel containing\ninformation on the specified Asset or Asset Folder\nincluding its extension, whether it is external, and its external url.",
		"endpoint_description": "This method is triggered by a GET call to an endpoint similar to: api/assets/a/10/details."
	},
	{
		"tool_name": "Assets_GetAssetHistory",
		"description": "Gets a paginated collection of all versions an Asset or\nAsset Folder has been through.",
		"input_schema": {
			"type": "object",
			"properties": {
				"Id": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"PageSize": {
					"type": "integer",
					"required": false,
					"in": "query"
				},
				"StartIndex": {
					"type": "integer",
					"required": false,
					"in": "query"
				}
			}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/api/v1/assets/history",
		"tags": [
			"Assets"
		],
		"summary": "Gets a paginated collection of all versions an Asset or\nAsset Folder has been through."
	},
	{
		"tool_name": "Assets_GetChildren",
		"description": "Get the collection of Assets and Asset Folders\ncontained under the specified Asset Folder.",
		"input_schema": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "The ID of the Asset Folder whose contents to retrieve."
				},
				"startIndex": {
					"type": "integer",
					"required": false,
					"in": "query",
					"description": "Starting index of entries. If not provided, starts from the first entry."
				},
				"pageSize": {
					"type": "integer",
					"required": false,
					"in": "query",
					"description": "Number of items to return. If not provided, returns all items."
				}
			},
			"required": [
				"id"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/api/v1/assets/asset/children",
		"tags": [
			"Assets"
		],
		"summary": "Get the collection of Assets and Asset Folders\ncontained under the specified Asset Folder."
	},
	{
		"tool_name": "Assets_GetFileBinary",
		"description": "Gets the binary file content for the specified Asset.",
		"input_schema": {
			"type": "object",
			"properties": {
				"assetId": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "ID of the asset whose binary file to retrieve."
				},
				"download": {
					"type": "boolean",
					"required": false,
					"in": "query",
					"description": "Boolean value indicating whether download the binary file. False by default."
				}
			},
			"required": [
				"assetId"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/api/v1/assets/file",
		"tags": [
			"Assets"
		],
		"summary": "Gets the binary file content for the specified Asset.",
		"endpoint_description": "If the operating user is not allowed access to this asset, the response will return with Forbidden."
	}
]