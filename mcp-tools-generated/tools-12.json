[
	{
		"tool_name": "Assets_GetFolderDescendantMarkings",
		"description": "Gets a collection of publishing target IDs marked for the specified Asset Folder's children.",
		"input_schema": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "ID of the asset folder whose children to get marked targets for."
				}
			},
			"required": [
				"id"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/assets/asset/descendant-targets",
		"tags": [
			"Assets"
		],
		"summary": "Gets a collection of publishing target IDs marked for the specified Asset Folder's children."
	},
	{
		"tool_name": "Assets_GetRecycleFolder",
		"description": "Retrieves the site's Recycle Asset Folder.",
		"input_schema": {
			"type": "object",
			"properties": {}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/assets/recycle-folder",
		"tags": [
			"Assets"
		],
		"summary": "Retrieves the site's Recycle Asset Folder.",
		"endpoint_description": "This method is triggered by a GET call to endpoint: api/assets/recycle-folder."
	},
	{
		"tool_name": "Assets_GetRoot",
		"description": "Retrieves a collection of the Asset Folders at the top level of the asset tree.",
		"input_schema": {
			"type": "object",
			"properties": {}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/assets/root",
		"tags": [
			"Assets"
		],
		"summary": "Retrieves a collection of the Asset Folders at the top level of the asset tree.",
		"endpoint_description": "This method is triggered by a GET call to endpoint: api/assets/root."
	},
	{
		"tool_name": "Assets_GetRootFolders",
		"description": "Assets get operation",
		"input_schema": {
			"type": "object",
			"properties": {
				"startIndex": {
					"type": "integer",
					"required": false,
					"in": "query"
				},
				"pageSize": {
					"type": "integer",
					"required": false,
					"in": "query"
				}
			}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/assets/root-folders",
		"tags": [
			"Assets"
		]
	},
	{
		"tool_name": "Assets_GetUnmanagedAsset",
		"description": "Retrieves an unamanged Asset or Asset Folder, by its id.",
		"input_schema": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "Id of the unmanaged asset or asset folder"
				}
			},
			"required": [
				"id"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/assets/unmanaged",
		"tags": [
			"Assets"
		],
		"summary": "Retrieves an unamanged Asset or Asset Folder, by its id."
	},
	{
		"tool_name": "Assets_GetUnmanagedChildren",
		"description": "Retrieves a collection of unmanaged Assets and Asset Folders, given a parent folder Id.",
		"input_schema": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "Id of the asset folder whose unmanaged child asset items to retrieve"
				},
				"startIndex": {
					"type": "integer",
					"required": false,
					"in": "query",
					"description": "Starting index of entries. If not provided, starts from the first entry."
				},
				"pageSize": {
					"type": "integer",
					"required": false,
					"in": "query",
					"description": "Number of entries to return. If not provided, returns all entries."
				}
			},
			"required": [
				"id"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/assets/unmanaged/children",
		"tags": [
			"Assets"
		],
		"summary": "Retrieves a collection of unmanaged Assets and Asset Folders, given a parent folder Id.",
		"endpoint_description": "Returns an empty collection if no unmanaged child assets are found"
	},
	{
		"tool_name": "Assets_GetUnmanagedRootFolders",
		"description": "Retrieve all root unmanaged asset folders./&gt;",
		"input_schema": {
			"type": "object",
			"properties": {
				"startIndex": {
					"type": "integer",
					"required": false,
					"in": "query",
					"description": "Starting index of entries. If not provided, starts from the first entry."
				},
				"pageSize": {
					"type": "integer",
					"required": false,
					"in": "query",
					"description": "Number of entries to return. If not provided, returns all entries."
				}
			}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/assets/unmanaged/root-folders",
		"tags": [
			"Assets"
		],
		"summary": "Retrieve all root unmanaged asset folders./&gt;",
		"endpoint_description": "Root folders are direct child folders of UnmanagedAssetLocation."
	},
	{
		"tool_name": "Assets_CheckDitaContentMovingOutOfDitaRoot",
		"description": "Assets get operation",
		"input_schema": {
			"type": "object",
			"properties": {
				"srcIds": {
					"type": "string",
					"required": true,
					"in": "query"
				},
				"tgtId": {
					"type": "string",
					"required": true,
					"in": "query"
				}
			},
			"required": [
				"srcIds",
				"tgtId"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/assets/dita-move-validation",
		"tags": [
			"Assets"
		]
	},
	{
		"tool_name": "Assets_Move",
		"description": "Moves an Asset or Asset Folder from its current location to a new target.",
		"input_schema": {
			"type": "object",
			"properties": {
				"tgtId": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "The Id of  the new parent Asset Folder into which the asset will be moved."
				},
				"overwriteSameName": {
					"type": "boolean",
					"required": false,
					"in": "query",
					"description": "Whether to replace an existing Asset of the same name with the newly created asset."
				}
			},
			"required": [
				"srcIds",
				"tgtId"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "patch",
		"endpoint": "/assets/move",
		"tags": [
			"Assets"
		],
		"summary": "Moves an Asset or Asset Folder from its current location to a new target."
	},
	{
		"tool_name": "Assets_Rename",
		"description": "Rename a Asset or Asset Folder.",
		"input_schema": {
			"type": "object",
			"properties": {
				"Id": {
					"type": "string",
					"minLength": 1
				},
				"Name": {
					"type": "string",
					"minLength": 1
				}
			},
			"required": [
				"Id",
				"Name"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/assets/rename",
		"tags": [
			"Assets"
		],
		"summary": "Rename a Asset or Asset Folder."
	},
	{
		"tool_name": "Assets_SearchAssetItems",
		"description": "Return a collection of Assets or Asset Folders\nthat match the search terms in the provided request.",
		"input_schema": {
			"type": "object",
			"properties": {
				"AssetSchemas": {
					"type": "array",
					"required": false,
					"in": "query"
				},
				"EndDate": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"IncludeAssets": {
					"type": "boolean",
					"required": false,
					"in": "query"
				},
				"IncludeDescendants": {
					"type": "boolean",
					"required": false,
					"in": "query"
				},
				"IncludeFolders": {
					"type": "boolean",
					"required": false,
					"in": "query"
				},
				"RootId": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"SearchString": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"StartDate": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"TargetId": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"SortField": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"SortOrder": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"PageSize": {
					"type": "integer",
					"required": false,
					"in": "query"
				},
				"StartIndex": {
					"type": "integer",
					"required": false,
					"in": "query"
				}
			}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/assets/search",
		"tags": [
			"Assets"
		],
		"summary": "Return a collection of Assets or Asset Folders\nthat match the search terms in the provided request.",
		"endpoint_description": "If no assets or asset folders are found matching the search conditions then an empty collection will be returned.\nIf a RootId is provided for the search and that Id is for an unmanaged asset folder, AssetSearchParams) will be automatically called."
	},
	{
		"tool_name": "Assets_SearchUnmanagedAssetItems",
		"description": "Return a collection of unmanaged Assets or Asset Folders\nthat match the search terms in the provided request.",
		"input_schema": {
			"type": "object",
			"properties": {
				"AssetSchemas": {
					"type": "array",
					"required": false,
					"in": "query"
				},
				"EndDate": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"IncludeAssets": {
					"type": "boolean",
					"required": false,
					"in": "query"
				},
				"IncludeDescendants": {
					"type": "boolean",
					"required": false,
					"in": "query"
				},
				"IncludeFolders": {
					"type": "boolean",
					"required": false,
					"in": "query"
				},
				"RootId": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"SearchString": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"StartDate": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"TargetId": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"SortField": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"SortOrder": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"PageSize": {
					"type": "integer",
					"required": false,
					"in": "query"
				},
				"StartIndex": {
					"type": "integer",
					"required": false,
					"in": "query"
				}
			}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/assets/search-unmanaged",
		"tags": [
			"Assets"
		],
		"summary": "Return a collection of unmanaged Assets or Asset Folders\nthat match the search terms in the provided request.",
		"endpoint_description": "If no assets or asset folders are found matching the search conditions then an empty collection will be returned.\nThe request must include a RootId specifying an unmanaged asset folder, or an exception will be thrown."
	},
	{
		"tool_name": "Assets_SetCategoryAssociations",
		"description": "Updates the category associations for the provided Assets or Asset Folders.",
		"input_schema": {
			"type": "object",
			"properties": {
				"contentId": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "The Id of the asset item whose category associations to update."
				}
			},
			"required": [
				"contentId"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/assets/asset/associations",
		"tags": [
			"Assets"
		],
		"summary": "Updates the category associations for the provided Assets or Asset Folders.",
		"endpoint_description": "The provided categoryIds should contain all categories that should remain associated with the asset item\nafter the update. Any categories previously associated with the asset item not included will be removed and any categories\nincluded but not previously associated will be added."
	},
	{
		"tool_name": "Assets_TotalSize",
		"description": "Gets the total combined byte size of all files in the Assets folder of the xml directory.",
		"input_schema": {
			"type": "object",
			"properties": {}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/assets/total-size",
		"tags": [
			"Assets"
		],
		"summary": "Gets the total combined byte size of all files in the Assets folder of the xml directory.",
		"endpoint_description": "If the xml \"Assets\" folder does not exist, 0 will be returned."
	},
	{
		"tool_name": "Assets_UndoCheckOut",
		"description": "Revert the asset to the state it was in before being checked out.",
		"input_schema": {
			"type": "object",
			"properties": {
				"Id": {
					"type": "string",
					"minLength": 1
				},
				"Recursive": {
					"type": "boolean"
				}
			},
			"required": [
				"Recursive",
				"Id"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/assets/undo-checkout",
		"tags": [
			"Assets"
		],
		"summary": "Revert the asset to the state it was in before being checked out.",
		"endpoint_description": "This will lose any information uploaded and not checked in.\nNote: Permission conflicts will cause a 400 error."
	},
	{
		"tool_name": "Assets_Unzip",
		"description": "Unzips an Asset into a new folder under the asset's parent directory.",
		"input_schema": {
			"type": "object",
			"properties": {
				"assetId": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "Id of the Asset to unzip."
				},
				"cleanFolder": {
					"type": "boolean",
					"required": true,
					"in": "query",
					"description": "If true, folders found in the parent directory with a matching name as the zipped asset will be deleted\n            and a new folder will be created for the unzipped asset."
				}
			},
			"required": [
				"assetId",
				"cleanFolder"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/assets/unzip",
		"tags": [
			"Assets"
		],
		"summary": "Unzips an Asset into a new folder under the asset's parent directory.",
		"endpoint_description": "If cleanFolder is false and a folder already exists with the same name as the asset under the parent directory, no new folder will be created."
	},
	{
		"tool_name": "Assets_Upload",
		"description": "Upload new assets to the CMS.",
		"input_schema": {
			"type": "object",
			"properties": {
				"file": {
					"type": "file",
					"required": true,
					"in": "formData",
					"description": "Asset file to be uploaded."
				},
				"assetname": {
					"type": "string",
					"required": false,
					"in": "formData"
				},
				"contentid": {
					"type": "string",
					"required": false,
					"in": "formData"
				},
				"parentfolder": {
					"type": "string",
					"required": true,
					"in": "formData"
				},
				"existingassetupdateid": {
					"type": "string",
					"required": false,
					"in": "formData"
				},
				"overrideschemaid": {
					"type": "string",
					"required": false,
					"in": "formData"
				},
				"schemaId": {
					"type": "string",
					"required": false,
					"in": "formData"
				},
				"followupupload": {
					"type": "boolean",
					"required": false,
					"in": "formData"
				},
				"updateonconflicts": {
					"type": "boolean",
					"required": false,
					"in": "formData"
				},
				"schemadefault": {
					"type": "boolean",
					"required": false,
					"in": "formData",
					"description": "If false, must specify 'overrideschemaid'."
				},
				"unpackzip": {
					"type": "boolean",
					"required": false,
					"in": "formData",
					"description": "Set 'true' when uploading a .zip file to be unpacked into its containing assets."
				},
				"deleteexistingfolder": {
					"type": "boolean",
					"required": false,
					"in": "formData",
					"description": "For use only with 'unpackzip' option. Deletes already-existing asset folder with same name as .zip, along with all its contents, and creates new asset folder with unpacked .zip contents inside."
				},
				"zipunpackhandleconflicts": {
					"type": "integer",
					"required": false,
					"in": "formData",
					"description": "For use only with 'unpackzip' option. Handling conflicts with existing assets in folder."
				},
				"skipexistingassets": {
					"type": "boolean",
					"required": false,
					"in": "formData",
					"description": "For use only with 'unpackzip' option."
				}
			},
			"required": [
				"file",
				"parentfolder"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/assets/upload",
		"tags": [
			"Assets"
		],
		"summary": "Upload new assets to the CMS."
	},
	{
		"tool_name": "Assets_GetAssetDitaProperties",
		"description": "Assets get operation",
		"input_schema": {
			"type": "object",
			"properties": {
				"assetId": {
					"type": "string",
					"required": true,
					"in": "query"
				}
			},
			"required": [
				"assetId"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/assets/asset-dependency",
		"tags": [
			"Assets"
		]
	},
	{
		"tool_name": "Assets_GetAllAssetOwners",
		"description": "Gets the dita content owners for a given asset (dita assets that reference this asset).",
		"input_schema": {
			"type": "object",
			"properties": {
				"assetId": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "Id of the asset to get owners for."
				}
			},
			"required": [
				"assetId"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/assets/asset-owners-deep",
		"tags": [
			"Assets"
		],
		"summary": "Gets the dita content owners for a given asset (dita assets that reference this asset).",
		"endpoint_description": "This method returns both direct and indirect owners.\nIn order to only retrieve direct owners use IUserSession)."
	},
	{
		"tool_name": "Assets_GetAvailableKeyDefinitions",
		"description": "Assets get operation",
		"input_schema": {
			"type": "object",
			"properties": {
				"assetId": {
					"type": "string",
					"required": true,
					"in": "query"
				},
				"topMapId": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"includeUnconfirmed": {
					"type": "boolean",
					"required": false,
					"in": "query"
				}
			},
			"required": [
				"assetId"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/assets/dita-key-defs",
		"tags": [
			"Assets"
		]
	}
]