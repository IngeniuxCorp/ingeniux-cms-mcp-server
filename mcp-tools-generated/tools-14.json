[
	{
		"tool_name": "Site_DownloadReport",
		"description": "Download a search report given its search session Id.",
		"input_schema": {
			"type": "object",
			"properties": {
				"sessionId": {
					"type": "string",
					"required": true,
					"in": "path",
					"description": "The Id for the report to download."
				}
			},
			"required": [
				"sessionId"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/site/report/{sessionId}/file",
		"tags": [
			"Site"
		],
		"summary": "Download a search report given its search session Id.",
		"endpoint_description": "The sessionId is the ReportId from the SearchReportModel returned by the report generation API call."
	},
	{
		"tool_name": "Site_RankedSearch",
		"description": "Perform a Content Item site search, retrieving results in order of how closely the results match the request keywords.",
		"input_schema": {
			"type": "object",
			"properties": {
				"Keywords": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"FieldName": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"SchemaName": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"Locale": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"FieldIsAttribute": {
					"type": "boolean",
					"required": false,
					"in": "query"
				},
				"FieldIsDate": {
					"type": "boolean",
					"required": false,
					"in": "query"
				},
				"UseCheckedOutContent": {
					"type": "boolean",
					"required": false,
					"in": "query"
				},
				"IncludeRecycled": {
					"type": "boolean",
					"required": false,
					"in": "query"
				},
				"IncludePages": {
					"type": "boolean",
					"required": false,
					"in": "query"
				},
				"IncludeAssets": {
					"type": "boolean",
					"required": false,
					"in": "query"
				},
				"SortField": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"SortOrder": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"PageSize": {
					"type": "integer",
					"required": false,
					"in": "query"
				},
				"StartIndex": {
					"type": "integer",
					"required": false,
					"in": "query"
				}
			}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/site/ranked-search",
		"tags": [
			"Site"
		],
		"summary": "Perform a Content Item site search, retrieving results in order of how closely the results match the request keywords."
	},
	{
		"tool_name": "Site_GetContentItemUsageSummary",
		"description": "Get information on the total number of Pages and Components that use a specified Content Item.",
		"input_schema": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "The Content Item Id to get a usage summary for"
				}
			},
			"required": [
				"id"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/site/usage-summary",
		"tags": [
			"Site"
		],
		"summary": "Get information on the total number of Pages and Components that use a specified Content Item.",
		"endpoint_description": "If a Content Item with the specified id cannot be found, an empty ContentItemUsageSummary will be returned."
	},
	{
		"tool_name": "Site_GetContentItemUsageReport",
		"description": "Get information on all the Pages and Components that use a specified Content Item.",
		"input_schema": {
			"type": "object",
			"properties": {
				"Id": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"SortField": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"SortOrder": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"PageSize": {
					"type": "integer",
					"required": false,
					"in": "query"
				},
				"StartIndex": {
					"type": "integer",
					"required": false,
					"in": "query"
				}
			}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/site/usage-report",
		"tags": [
			"Site"
		],
		"summary": "Get information on all the Pages and Components that use a specified Content Item."
	},
	{
		"tool_name": "Pages_GetPages",
		"description": "Retrieves the collection of all Pages, in a paginated fashion.",
		"input_schema": {
			"type": "object",
			"properties": {
				"startIndex": {
					"type": "integer",
					"required": false,
					"in": "query",
					"description": "Starting index of entries. If not provided, starts from the first entry."
				},
				"pageSize": {
					"type": "integer",
					"required": false,
					"in": "query",
					"description": "Number of entries to return. If not provided, returns all entries."
				}
			}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/pages",
		"tags": [
			"Pages"
		],
		"summary": "Retrieves the collection of all Pages, in a paginated fashion.",
		"endpoint_description": "Pages are returned in the order they were created. This doesn't necessarily mean it will always start\nwith smallest XID, especially for content migrated from Version 8."
	},
	{
		"tool_name": "Pages_GetRoot",
		"description": "Retrieves the Root Page of the Site Instance.",
		"input_schema": {
			"type": "object",
			"properties": {}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/pages/root",
		"tags": [
			"Pages"
		],
		"summary": "Retrieves the Root Page of the Site Instance.",
		"endpoint_description": "Root Page is automatically created during Site Creation."
	},
	{
		"tool_name": "Pages_GetRecycleFolder",
		"description": "Retrieves the Recycle Folder of the Site Instance",
		"input_schema": {
			"type": "object",
			"properties": {}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/pages/recycle-folder",
		"tags": [
			"Pages"
		],
		"summary": "Retrieves the Recycle Folder of the Site Instance",
		"endpoint_description": "The Recycle Folder cannot be Deleted."
	},
	{
		"tool_name": "Pages_GetChildren",
		"description": "Get the collection of Pages contained under the specified Page in the site tree.",
		"input_schema": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "The ID of the Page whose contents to retrieve."
				},
				"startIndex": {
					"type": "integer",
					"required": false,
					"in": "query",
					"description": "Starting index of entries. If not provided, starts from the first entry."
				},
				"pageSize": {
					"type": "integer",
					"required": false,
					"in": "query",
					"description": "Number of items to return. If not provided, returns all items."
				}
			},
			"required": [
				"id"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/pages/page/children",
		"tags": [
			"Pages"
		],
		"summary": "Get the collection of Pages contained under the specified Page in the site tree."
	},
	{
		"tool_name": "Pages_GetDescendants",
		"description": "Get the collection of Pages which are descendants of the specified Page in the site tree.",
		"input_schema": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "The ID of the Page under which to look for descendants."
				},
				"startIndex": {
					"type": "integer",
					"required": false,
					"in": "query",
					"description": "Starting index of entries. If not provided, starts from the first entry."
				},
				"pageSize": {
					"type": "integer",
					"required": false,
					"in": "query",
					"description": "Number of items to return. If not provided, returns all items."
				}
			},
			"required": [
				"id"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/pages/page/descendants",
		"tags": [
			"Pages"
		],
		"summary": "Get the collection of Pages which are descendants of the specified Page in the site tree."
	},
	{
		"tool_name": "Pages_GetDescendantAliasCount",
		"description": "Get a count of the number of DITA aliases which are descendants of the specified Page.",
		"input_schema": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "The ID of the Page under which to look for descendants."
				},
				"startIndex": {
					"type": "integer",
					"required": false,
					"in": "query",
					"description": "Starting index of entries. If not provided, starts from the first entry."
				},
				"pageSize": {
					"type": "integer",
					"required": false,
					"in": "query",
					"description": "Number of items to return. If not provided, returns all items."
				}
			},
			"required": [
				"id"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/pages/page/descendant-alias-count",
		"tags": [
			"Pages"
		],
		"summary": "Get a count of the number of DITA aliases which are descendants of the specified Page."
	},
	{
		"tool_name": "Pages_GetParent",
		"description": "Retrieves the parent Page for the specified Page.",
		"input_schema": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "The ID of the Page whose parent to retrieve."
				}
			},
			"required": [
				"id"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/pages/page/parent",
		"tags": [
			"Pages"
		],
		"summary": "Retrieves the parent Page for the specified Page."
	},
	{
		"tool_name": "Pages_GetAncestors",
		"description": "Get the collection of Pages above the specified Page in the site tree.",
		"input_schema": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "The ID of the Page whose ancestors to retrieve."
				}
			},
			"required": [
				"id"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/pages/page/ancestors",
		"tags": [
			"Pages"
		],
		"summary": "Get the collection of Pages above the specified Page in the site tree.",
		"endpoint_description": "If the page is the content store root, returns an empty collection."
	},
	{
		"tool_name": "Pages_GetPage",
		"description": "Retrieves the Page with the specified xID.",
		"input_schema": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "Id of the Page to retrieve."
				}
			},
			"required": [
				"id"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/pages/page",
		"tags": [
			"Pages"
		],
		"summary": "Retrieves the Page with the specified xID."
	},
	{
		"tool_name": "Pages_DeletePage",
		"description": "Removes a single Page.",
		"input_schema": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "The ID of the Page to remove/purge."
				}
			},
			"required": [
				"id"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "delete",
		"endpoint": "/pages/page",
		"tags": [
			"Pages"
		],
		"summary": "Removes a single Page.",
		"endpoint_description": "if \"page\" is null, returns false.\n\n\nIf the Page is not under Recycle Folder, it will be moved to Recycle Folder.\nIf it is already under Recycle Folder, it will be permanently purged.\n\nTwo events are fired during execution of this method: BeforePageDelete and \nAfterPageDelete."
	},
	{
		"tool_name": "Pages_GetPageDetails",
		"description": "Gets details on the specified page including check-in/out state, marked publishing targets, current version, etc.",
		"input_schema": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "Id of the Page to get details for"
				},
				"version": {
					"type": "integer",
					"required": false,
					"in": "query",
					"description": "The version of the page to get details for. Optional, will default to 0 (current version) if not specified."
				}
			},
			"required": [
				"id"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/pages/page/details",
		"tags": [
			"Pages"
		],
		"summary": "Gets details on the specified page including check-in/out state, marked publishing targets, current version, etc."
	},
	{
		"tool_name": "Pages_GetPageContext",
		"description": "Retrieves a list of contexts for the specified pages including whether they are marked for publish, checked out, can be copied, the user's access to them, etc.",
		"input_schema": {
			"type": "object",
			"properties": {}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/pages/page/context",
		"tags": [
			"Pages"
		],
		"summary": "Retrieves a list of contexts for the specified pages including whether they are marked for publish, checked out, can be copied, the user's access to them, etc."
	},
	{
		"tool_name": "Pages_SetCategoryAssociations",
		"description": "Updates the category associations for the provided Page or Component.",
		"input_schema": {
			"type": "object",
			"properties": {
				"contentId": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "The Id of the page whose category associations to update."
				}
			},
			"required": [
				"contentId"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/pages/page/associations",
		"tags": [
			"Pages"
		],
		"summary": "Updates the category associations for the provided Page or Component.",
		"endpoint_description": "The provided categoryIds should contain all categories that should remain associated with the page\nafter the update. Any categories previously associated with the page that are not included will be removed and any categories\nincluded but not previously associated will be added."
	},
	{
		"tool_name": "Pages_GetByCategory",
		"description": "Retrieves a paginated collection of all the Pages associated with this CategoryNode.",
		"input_schema": {
			"type": "object",
			"properties": {
				"categoryId": {
					"type": "integer",
					"required": true,
					"in": "query",
					"description": "Id of the category to get page associations for"
				},
				"startIndex": {
					"type": "integer",
					"required": false,
					"in": "query",
					"description": "Starting index of entries. If not provided, starts from the first entry."
				},
				"pageSize": {
					"type": "integer",
					"required": false,
					"in": "query",
					"description": "Number of entries to return. If not provided, returns all entries."
				}
			},
			"required": [
				"categoryId"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/pages/by-category",
		"tags": [
			"Pages"
		],
		"summary": "Retrieves a paginated collection of all the Pages associated with this CategoryNode.",
		"endpoint_description": "If a category with the specified Id is not found, an empty collection will be returned."
	},
	{
		"tool_name": "Pages_Move",
		"description": "Moves a Page together with its descendants, to the specified location.",
		"input_schema": {
			"type": "object",
			"properties": {
				"tgtId": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "Target location Page id. The moved Page could be placed before, after, or as child of this Page depending on position."
				},
				"position": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "Target position: 0 - onto/as a child of the target page, 1 - before, 2 - after"
				}
			},
			"required": [
				"srcIds",
				"tgtId",
				"position"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "patch",
		"endpoint": "/pages/move",
		"tags": [
			"Pages"
		],
		"summary": "Moves a Page together with its descendants, to the specified location.",
		"endpoint_description": "Two events are fired during execution of this method: BeforePageMove and \nAfterPageMove."
	},
	{
		"tool_name": "Pages_Copy",
		"description": "Copies a Page to the specified location.",
		"input_schema": {
			"type": "object",
			"properties": {
				"isSmartCopy": {
					"type": "boolean",
					"required": true,
					"in": "query",
					"description": "Whether to execute custom hooks code OnBeforePasteSpecial and OnAfterPasteSpecial."
				},
				"singlePageCopy": {
					"type": "boolean",
					"required": true,
					"in": "query",
					"description": "If true, will only copy the specified Page. If false, descendants of the Page will also be copied."
				},
				"tgtId": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "Target location Page id.The copied Page could be placed before, after, or as child of this Page depending on position."
				},
				"position": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "Target position: 0 - onto/as a child of the target page, 1 - before, 2 - after"
				},
				"targetLocale": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "Locale of the target Page"
				}
			},
			"required": [
				"isSmartCopy",
				"singlePageCopy",
				"tgtId",
				"position",
				"targetLocale"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/pages/copy",
		"tags": [
			"Pages"
		],
		"summary": "Copies a Page to the specified location.",
		"endpoint_description": "Two events are fired during execution of this method: BeforePageCopy and \nAfterPageCopy."
	}
]