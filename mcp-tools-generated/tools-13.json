[
	{
		"tool_name": "Assets_DownloadAssetOwnersCsv",
		"description": "Assets get operation",
		"input_schema": {
			"type": "object",
			"properties": {
				"assetId": {
					"type": "string",
					"required": true,
					"in": "query"
				},
				"all": {
					"type": "boolean",
					"required": true,
					"in": "query"
				},
				"pubTargetId": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"showAllPubTargets": {
					"type": "boolean",
					"required": false,
					"in": "query"
				}
			},
			"required": [
				"assetId",
				"all"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/api/v1/assets/asset-owners-csv",
		"tags": [
			"Assets"
		]
	},
	{
		"tool_name": "Assets_DownloadAssetDependentsCsv",
		"description": "Assets get operation",
		"input_schema": {
			"type": "object",
			"properties": {
				"assetId": {
					"type": "string",
					"required": true,
					"in": "query"
				},
				"all": {
					"type": "boolean",
					"required": true,
					"in": "query"
				},
				"pubTargetId": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"showAllPubTargets": {
					"type": "boolean",
					"required": false,
					"in": "query"
				}
			},
			"required": [
				"assetId",
				"all"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/api/v1/assets/asset-dependents-csv",
		"tags": [
			"Assets"
		]
	},
	{
		"tool_name": "Assets_GetAssetDITAScopes",
		"description": "Gets the scopes in which a DITA asset can be previewed, including all of the ditamap owners and ditavals available.",
		"input_schema": {
			"type": "object",
			"properties": {
				"assetId": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "Id of the Asset to retrieve scopes for"
				},
				"pubTargetId": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "The Id of the publishing target to use for DITA normalization."
				}
			},
			"required": [
				"assetId",
				"pubTargetId"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/api/v1/assets/ditamap-scopes",
		"tags": [
			"Assets"
		],
		"summary": "Gets the scopes in which a DITA asset can be previewed, including all of the ditamap owners and ditavals available."
	},
	{
		"tool_name": "Assets_GetAllAssetDependents",
		"description": "Gets the dita content dependents for a given asset (dita assets that this asset references).",
		"input_schema": {
			"type": "object",
			"properties": {
				"assetId": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "Id of the asset to get dependents for."
				}
			},
			"required": [
				"assetId"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/api/v1/assets/asset-dependents-deep",
		"tags": [
			"Assets"
		],
		"summary": "Gets the dita content dependents for a given asset (dita assets that this asset references).",
		"endpoint_description": "This method returns both direct and indirect dependents.\nIn order to only retrieve direct dependents use String)."
	},
	{
		"tool_name": "Assets_SetAssetOutputFormats",
		"description": "Sets the DITA publishing output formats for a given DITA Asset.",
		"input_schema": {
			"type": "object",
			"properties": {
				"assetId": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "ID of the DITA Asset whose output formats to set"
				}
			},
			"required": [
				"assetId"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "put",
		"endpoint": "/api/v1/assets/asset-dita-output-formats",
		"tags": [
			"Assets"
		],
		"summary": "Sets the DITA publishing output formats for a given DITA Asset.",
		"endpoint_description": "Throws an exception if the specified asset cannot be found."
	},
	{
		"tool_name": "Assets_SetAssetDitavals",
		"description": "Sets the ditavals to use for a given DITA Asset.",
		"input_schema": {
			"type": "object",
			"properties": {
				"assetId": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "Id of the DITA Asset whose ditavals to set"
				}
			},
			"required": [
				"assetId"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "put",
		"endpoint": "/api/v1/assets/asset-ditavals",
		"tags": [
			"Assets"
		],
		"summary": "Sets the ditavals to use for a given DITA Asset.",
		"endpoint_description": "Throws an exception if the specified asset cannot be found."
	},
	{
		"tool_name": "Assets_DeleteDitaPreviewCache",
		"description": "Delete the DITA preview cache to given asset and publishing target",
		"input_schema": {
			"type": "object",
			"properties": {
				"assetId": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "Id of the the asset to delete preview cache for"
				},
				"pubTargetId": {
					"type": "string",
					"required": false,
					"in": "query",
					"description": "Id of the publishing target to delete preview cache on for the asset"
				}
			},
			"required": [
				"assetId"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "delete",
		"endpoint": "/api/v1/assets/dita-preview-cache",
		"tags": [
			"Assets"
		],
		"summary": "Delete the DITA preview cache to given asset and publishing target"
	},
	{
		"tool_name": "Assets_GetOxygenAccessCredentials",
		"description": "Assets put operation",
		"input_schema": {
			"type": "object",
			"properties": {}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "put",
		"endpoint": "/api/v1/assets/dita-oxygen-oauth-creds",
		"tags": [
			"Assets"
		]
	},
	{
		"tool_name": "Site_SearchContentItems",
		"description": "Retrieves a list of content items given a set of search parameters.",
		"input_schema": {
			"type": "object",
			"properties": {
				"SearchText": {
					"type": "string",
					"required": false,
					"in": "query"
				},
				"IncludeComponents": {
					"type": "boolean",
					"required": false,
					"in": "query"
				},
				"IncludePages": {
					"type": "boolean",
					"required": false,
					"in": "query"
				},
				"OrderByScore": {
					"type": "boolean",
					"required": false,
					"in": "query"
				},
				"Types": {
					"type": "array",
					"required": false,
					"in": "query"
				},
				"SubTypes": {
					"type": "array",
					"required": false,
					"in": "query"
				},
				"IncludeContentPath": {
					"type": "boolean",
					"required": false,
					"in": "query"
				},
				"IncludeRecycled": {
					"type": "boolean",
					"required": false,
					"in": "query"
				},
				"IncludeAssetRoot": {
					"type": "boolean",
					"required": false,
					"in": "query"
				},
				"PageSize": {
					"type": "integer",
					"required": false,
					"in": "query"
				},
				"StartIndex": {
					"type": "integer",
					"required": false,
					"in": "query"
				}
			}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/api/v1/site/content-item-search",
		"tags": [
			"Site"
		],
		"summary": "Retrieves a list of content items given a set of search parameters.",
		"endpoint_description": "If the request.SearchText is not an page or asset Id an empty list will be returned."
	},
	{
		"tool_name": "Site_GetTabModel",
		"description": "Gets the TabDataModel indicating which tabs should be active/displayed for a given Content Item.",
		"input_schema": {
			"type": "object",
			"properties": {
				"contentItemId": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "Id of the Content Item to get tab data for."
				}
			},
			"required": [
				"contentItemId"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/api/v1/site/tab-model",
		"tags": [
			"Site"
		],
		"summary": "Gets the TabDataModel indicating which tabs should be active/displayed for a given Content Item."
	},
	{
		"tool_name": "Site_GenerateAssetRefernceReport",
		"description": "Creates a report containing information on all Pages that reference the Asset specified in the request.",
		"input_schema": {
			"type": "object",
			"properties": {}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/api/v1/site/generate-asset-reference-report",
		"tags": [
			"Site"
		],
		"summary": "Creates a report containing information on all Pages that reference the Asset specified in the request."
	},
	{
		"tool_name": "Site_GenerateBrokenLinkReport",
		"description": "Creates a report containing information on all Pages and Components that contain broken links.",
		"input_schema": {
			"type": "object",
			"properties": {}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/api/v1/site/generate-broken-link-report",
		"tags": [
			"Site"
		],
		"summary": "Creates a report containing information on all Pages and Components that contain broken links."
	},
	{
		"tool_name": "Site_GenerateTextSearchReport",
		"description": "Creates a report containing information on all Pages that contain the text specified in the request.",
		"input_schema": {
			"type": "object",
			"properties": {}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/api/v1/site/generate-search-text-report",
		"tags": [
			"Site"
		],
		"summary": "Creates a report containing information on all Pages that contain the text specified in the request."
	},
	{
		"tool_name": "Site_GenerateAssetTextSearchReport",
		"description": "Creates a report containing information on all Assets that have text content contains the text specified in the request.",
		"input_schema": {
			"type": "object",
			"properties": {}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/api/v1/site/generate-search-asset-text-report",
		"tags": [
			"Site"
		],
		"summary": "Creates a report containing information on all Assets that have text content contains the text specified in the request."
	},
	{
		"tool_name": "Site_GenerateUnusedAssetsReport",
		"description": "Creates a report containing information on all unused Assets in a specified Asset Folder.",
		"input_schema": {
			"type": "object",
			"properties": {}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/api/v1/site/generate-unused-assets-report",
		"tags": [
			"Site"
		],
		"summary": "Creates a report containing information on all unused Assets in a specified Asset Folder."
	},
	{
		"tool_name": "Site_GeneratePageReferenceReport",
		"description": "Creates a report containing information on all Pages that reference the Page or Component specified in the request.",
		"input_schema": {
			"type": "object",
			"properties": {}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/api/v1/site/generate-page-reference-report",
		"tags": [
			"Site"
		],
		"summary": "Creates a report containing information on all Pages that reference the Page or Component specified in the request."
	},
	{
		"tool_name": "Site_GetReportStatus",
		"description": "Get the status of a search report given its search session Id.",
		"input_schema": {
			"type": "object",
			"properties": {
				"sessionId": {
					"type": "string",
					"required": true,
					"in": "path",
					"description": "The Id for the report whose status to retrieve."
				}
			},
			"required": [
				"sessionId"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/api/v1/site/report/{sessionId}/status",
		"tags": [
			"Site"
		],
		"summary": "Get the status of a search report given its search session Id.",
		"endpoint_description": "The sessionId is the ReportId from the SearchReportModel returned by the report generation API call."
	},
	{
		"tool_name": "Site_GetReport",
		"description": "Get a search report given its search session Id.",
		"input_schema": {
			"type": "object",
			"properties": {
				"sessionId": {
					"type": "string",
					"required": true,
					"in": "path",
					"description": "The Id for the report to retrieve."
				}
			},
			"required": [
				"sessionId"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "get",
		"endpoint": "/api/v1/site/report/{sessionId}",
		"tags": [
			"Site"
		],
		"summary": "Get a search report given its search session Id.",
		"endpoint_description": "The sessionId is the ReportId from the SearchReportModel returned by the report generation API call."
	},
	{
		"tool_name": "Site_CancelReport",
		"description": "Cancel a search given its search session Id.",
		"input_schema": {
			"type": "object",
			"properties": {
				"sessionId": {
					"type": "string",
					"required": true,
					"in": "query",
					"description": "The Id of the search to cancel."
				}
			},
			"required": [
				"sessionId"
			]
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/api/v1/site/report/cancel",
		"tags": [
			"Site"
		],
		"summary": "Cancel a search given its search session Id.",
		"endpoint_description": "The sessionId is the ReportId from the SearchReportModel returned by the report generation API call."
	},
	{
		"tool_name": "Site_ReplaceReportEntry",
		"description": "Fix/Replace the values searched for in the specified Pages or Components with a new value.",
		"input_schema": {
			"type": "object",
			"properties": {}
		},
		"output_schema": {
			"type": "object"
		},
		"method": "post",
		"endpoint": "/api/v1/site/report/replace-entry",
		"tags": [
			"Site"
		],
		"summary": "Fix/Replace the values searched for in the specified Pages or Components with a new value.",
		"endpoint_description": "The request.SessionId is the ReportId from the SearchReportModel returned by the report generation API call."
	}
]